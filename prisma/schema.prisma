// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  uid       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id                      String           @id @default(cuid())
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  status                  OrderStatus
  trainingImages          TrainingImage[]
  trainingImagesZipUrl    String?
  trainedModelUrl         String?
  replicateTrainingId     String?
  replicateTrainingStatus ReplicateStatus?
  user                    User             @relation(fields: [userId], references: [id])
  userId                  String
  job                     OrderJob?
  jobId                   String?
  inferenceJobs           InferenceJob[]
  resultImages            ResultImage[]
}

enum OrderStatus {
  PENDING
  TRAINING
  INFERING
  COMPLETED
  FAILED
}

enum ReplicateStatus {
  starting
  processing
  succeeded
  failed
  canceled
}

model InferenceJob {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  replicateId       String?
  status            ReplicateStatus
  prompt            String
  negativePrompt    String
  version           String
  width             Int
  height            Int
  numOutputs        Int
  numInferenceSteps Int
  guidanceScale     Float
  orderId           String
  order             Order           @relation(fields: [orderId], references: [id])
}

// this is a data model for managing background worker jobs
model OrderJob {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  data      Json
  state     String
  error     String?
  progress  Int?
  priority  Int      @default(0)
  queue     String   @default("default")
  attempts  Int      @default(0)
  max       Int      @default(3)
  delay     Int      @default(0)
  timestamp Int      @default(0)
  processed Boolean  @default(false)
  finished  Boolean  @default(false)
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
}

model TrainingImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  url       String
  width     Int
  height    Int
  size      Int
  type      String
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
}

model ResultImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
}
